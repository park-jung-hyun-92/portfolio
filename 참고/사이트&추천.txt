알아두면 좋은 사이트 

https://www.wolframalpha.com/input/?i=x%2B%280.17*x%29%3D9090909 - 수학 까먹어서 못하겟거나 계산 귀찬으신분들은 이사이트 참조 [단, 공식은 알아야함] 

https://bitnami.com/stack/wamp [wamp - A : 아파치 , M : My Sql , P : PHP] //윈도우 버전임
[웹 서버를 설치하기 위해 BitNami를 설치하는 곳] - [BitNami를 이용해 아파치,PHP,MY SQL 설치함]
[순서 : 사이트 접속 후 > On my computer [Win/Mac/Linux] 클릭 > Download for Window 64-bit 다운 > No thank, just take me to the download 다운 > 다운로드 받은 파일 더블클릭 후 설치 >
> 설치할 컴포넌트 선택하는 내용 나오면 "PhpMyAdimin"만 체크 후 다음 > 설치 경로 [설치된 위치를 기억해야함] > 패스워드 화면 [My Sql이라는 데이터베이스 비밀번호 지정 화면 - 실제로 웹사이트 만들거면 복잡한 비밀번호로 / 교육용이라면 쉬운 비밀번호로] >
> Launch wampstack in the cloud with Bitami 체크 해제 > Allow access 버튼 클릭해 엑세스 허용 [방화벽 관련임] > Launch Bitnami WAMP Stack 체크 후 Finish 버튼 클릭 > 웹페이지 열리고, Bitnami MAMP Stack 프로그램 열리면 설치 성공 
[// Finish 버튼을 누르면 두가지 일이 일어남 - 1. 웹페이지 열림 [>웹페이지 주소창에 127.0.0.1:8080or8081로 나오는데 이때[포트라고함] :8080 or :8081[기본적으로는 80 > 그러나 8080이나 8081을 개발자가 직접 포트를 만들어야함]을 실습에서도 주소 뒤에 :8080 or :8081을 붙여야 함[아주 중요] - // 기존의 웹 서버는 주소만 입력해도 그냥 열리지만, 비트나미는 나중에 설치한 것이므로 뒤에 :8080 or :8081을 붙여서 나중에 설치한 비트나미에 접속하겠다는 것을 표시하는 것임]
2. 비트나미 매니저 [설치된 경로에 manager-windows 누르면 언제나 사용 가능] 라는 프로그램이 실행됨 [ 아파치,PHP,MySql을 통합으로 관리할 수 있음 ]
[// 비트나미 매니저[manager-windows]의 Manage Sercers 탭에서 웹서버나 데이터베이스를 켜고 끌 수 있음 - 초록색으로 떠 있는 것을 확인해야 하고 , 초록색이 아니라면 선택해서 Start 버튼 눌러 실행해야 동작함.
[// 비트나미를 이용해 아파치,php,mysql을 실행했다면 apache2 디렉터리 아래의 htdocs라는 디렉터리로 이동해서 실습 진행 [htdocs라는 디렉터리를 일종의 기지로 삼아 실습 파일 위치하면 됨 - 이유 : 웹 브라우저가 앞서 비트나미를 통해 설치한 웹 서버에 접속해서 어떤 웹 페이지를 요청하면 웹 서버는 이 디렉터리에서 웹 페이지를 찾기 때문에]
>아톰 프로그램 실행 후 > 메뉴에서 파일-add project folder... 클릭 후 htdocs 폴더에 test.php 파일 만들기 > 그리고 <?php 엔터 - 들여쓰기 phpinfo(); 엔터 - ?> 작성 후 저장 > test.php 파일 열기 > 웹브라우저에 php에 대한 복잡한 정보가 나오면 php 작동 완료 

PHP 환경설정 변경(윈도우) - php 코드의 어디에서 실수가 있었는지 알려주는 기능 설정 [기본적으로는 비활성화 이므로 바꿔줘야 함]
1. [비트나미 PHP 설치 경로 > php.ini 문서 [확장자 안보이면 php 문서] > 파일을 대상으로 마우스 오른쪽 버튼 크릭 후 [편집] 버튼 실행 > 컨트롤+F 누른 후 display_errors 검색 > Off를 On으로 바꾸기 [에러 잡는 기능 비활성화를 활성화로 바꾼다는 것]
//>***그러나 이 기능을 활성화 한다는 것은 웹사이트 오류가 보인다는 뜻 [즉, 실제로 서비스할 떄는 비활성화 [활성화 시키면 비밀번호나 디렉터리 경로 같은 중요한 단서를 외부에 제공하게 됨] / 연습할 때는 활성화]***<
2. [컨트롤+F > "opcache" 검색 > opcache.enable=1[활성화] 을 opcache.enable=0[비활성화]으로 바꿈 [이 설정은 PHP의 성능을 높이기 위함 - 이 설정이 활성화 되어있으면 PHP가 같은 시간동안 더 많은 웹사이트를 만들 수 있으나, php 파일을 수정해도 바로 반영이 안되고 1분정도의 소요시간 발생 - 그러므로 개발할때는 비활성화]
3. 이제 변경사항을 저장한 후 매니저 프로그램을 열고 [Manage Servers] 탭에서 아파치 웹 서버를 선택하고 [Restart] 버튼을 클릭해 재시작하기 
4. 그다음 매니저 프로그램의 [Manage Servers] 탭에서 > [Configure] 버튼을 누르고 [Open Access Log] 버튼을 클릭 
4-1 [이 파일에는 앞서 설치한 웹 서버에 사람들이 접속할 때마다 접속 기록이 한 줄씩 추가 됨 > 사이트의 방문자를 찾고 싶다면 access log를 확인하기 [단, display_errors가 비활성화 되어있어도 error_log라는 파일에 에러가 한 줄씩 맨 끝에 기록되므로 display_errors 비활성화 경우에도 확인 가능]

PHP OS MAC버전으로 설치 방법
-위의 윈도우 버전과 똑같음 > 단, Download for Window 64-bit 다운 대신 Download for OS X 64-bit 로 설치 > 그리고 Launch Bitnami WAMP Stack 체크 후 Finish 버튼 클릭 후 웹페이지가 열리면
>웹페이지 주소창에 127.0.0.1:8080or8081로 나오는데 이때[포트라고함] :8080 or :8081[기본적으로는 80 > 그러나 8080이나 8081을 개발자가 직접 포트를 만들어야함]을 실습에서도 주소 뒤에 :8080 or :8081을 붙여야 함[아주 중요] - // 기존의 웹 서버는 주소만 입력해도 그냥 열리지만, 비트나미는 나중에 설치한 것이므로 뒤에 :8080 or :8081을 붙여서 나중에 설치한 비트나미에 접속하겠다는 것을 표시하는 것임
>위에랑 쭉 똑같다가 비트나미가 설치된 경로 > manager-osc라는 프로그램 실행하면 비트나미 매니저 실행됨 > 그리고 아톰 실행 후 atom 메뉴에서 [File] - [Add Project Folder]을 차례대로 클릭 후 [htdocs] 디렉터에서 [open] 누르기 > 그런다음 [new file] 선택 후 test.php라는 파일 만들고 작성하기. 그리고 <?php 엔터 - 들여쓰기 phpinfo(); 엔터 - ?> 작성 후 저장 > 웹브라우저 주소에 127.0.0.1:8080/test.php로 들어갔을때 php의 복잡한 정보가 나오면 php 작동 완료 

PHP 환경설정 변경(os mac)
-위의 윈도우와 똑같음 단, 맨처음에 php.ini 문서 오른쪽 마우스 다음으로 열기 > 아톰 실행 > 활성/비활성 똑같음

https://caniuse.com
[HTML, CSS, JavaScript 기술 가운데 현재 웹 브라우저들이 얼마나 그 최신 기술을 지원하는지에 대한 통계를 보여주는 곳]

https://www.w3.org/
[W3C (웹을 만드는 곳) - 국제민간표준화기구]

https://advancedwebranking.com/
[구글에서는 전 세계에서 만들어진 수많은 웹 페이지를 분석 > 그 정보를 기반으로 내용을 보기 좋게 정리 정돈하여 통계를 보여주는 곳] 

http://lingua.mtsu.edu/chinese-computing/statistics/char/list.php?Which=MO
[중국에서 가장 빈도 수가 높은 태그 통계]

https://unsplash.com/
[고품질 이미지들을 저작권에 구애받지 않고 사용할 수 있는 공공재와 같은 사이트]

http://info.cern.ch
[퉵의 메소포타미아 - 1990년 12월 24일 처음 탄생(원시웹)]

https://www.w3schools.com
[웹 관련 기법을 무료로 배울 수 있는 곳(태그에 대한 설명 있음)]

https://www.opentutorials.org/
[생활코딩 - 웹 관련 코딩 배우는 곳]

https://developer.mozilla.org/ko/docs/Web/API/Document/querySelector
[모질라 - 웹 태그]


검색 키워드 추천

document [어떤 웹 페이지의 태그를 삭제하고 싶거나 어떤 태그의 자식 태그를 추가하고 싶을 때 'document' 객체 찾기 > 이 객체에 필요한 메서드가 포함 되어 있을 겁니다]
dom ['document' 객체로 찾을 수 없다면 DOM 객체 찾기]
window [웹 페이지가 아니라 웹 브라우저 자체를 제어해야 한다면 'window' 객체 찾기 > 현재 열려있는 웹 페이지의 주소가 무엇인지 알아내야 할 때, 새 창을 열어야 할 때, 웹 브라우저의 화면 크기를 자바스크립트를 통해 알아야 할 때 > window 객체에 속한 프로퍼티나 메서드가 도울 수 있음]
Ajax [웹 페이지를 리로드하지 않고도 정보를 변경하고 싶을 때 > Ajax는 현대적인 웹/앱을 만드는데 필수적인 테크닉]
cookie [웹 페이지가 리로드돼도 현재 상태를 유지하고 싶을 때 > 사용자를 위한 개인화된 서비스 제공 가능]
webRTC [화상 통신 웹/앱 만들고 싶을 때]
speech [사용자의 음성을 인식하고 음성으로 정보를 전달하고 싶을 때 'speech'로 시작하는 API를 살펴보기]
WebGL [3차원 그래픽으로 게임을 만들고 싶을 때]
WebVR [가상현실에 관심이 많을 때]






에디터

컴퓨터 내장 에디터
[윈도우 - 메모장 / macOS - 텍스트 편집기]
[리눅스 - gedit]

html editor / best html editor 2020
[검색 방법 - 에디터 찾을 때 / 2020년도 최신 에디터 찾을 때]

https://atom.io/
[Atom]